from __future__ import print_function

from abc import ABCMeta, abstractmethod
import datetime
import queue
from event import FillEvent, OrderEvent


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract class handles the interaction between a set of order objects
    generated by a Portfolio and Fill objects occurring in the market.
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an order event and executes it producing a Fill event that is put in the Events queue.
        param event: Event objects with order information
        """
        raise NotImplementedError('Should implement execute_order()')


class SimulatedExecutionHandler(ExecutionHandler):
    """
    The SimulatedExecutionHandler converts all order objects into their equivalent fill objects
    automatically without latency, slippage or fill-ratio issues.

    ARCA is the exchange used for the simulation.
    """

    def __int__(self, events):
        """
        Initialize the handler, setting up the events queues.
        events: the Queue of Event objects
        """
        self.events = events

    def execute_order(self, event):
        """
        Converts Order objects into Fill objects.
        event: Event objects with order information
        """
        if event.type == 'ORDER':
            fill_event = FillEvent(datetime.datetime.utcnow(), event.symbol, 'ARCA', event.quantity, event.direction,
                                   None)
            self.events.put(fill_event)
